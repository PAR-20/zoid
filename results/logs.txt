Dataset: dataset1
Classes: ['pneumonia', 'normal']
Class distribution: {'pneumonia': 3875, 'normal': 1341}
Sample image sizes: [(1048, 736), (984, 672), (992, 712), (1224, 888), (864, 480)]
--------------------------------------------------

Comparing statistics across all datasets:
Un seul dataset valide (dataset1), pas de comparaison n√©cessaire.
Exploration summary saved to exploration_summary.csv

Step 1: Data Exploration
Dataset: dataset1
Classes: ['pneumonia', 'normal']
Class distribution: {'pneumonia': 3875, 'normal': 1341}
Sample image sizes: [(1048, 736), (984, 672), (992, 712), (1224, 888), (864, 480)]
--------------------------------------------------

Step 2: Data Preprocessing
Dataset: (5216, 150, 150) images, 2 classes

Step 3: Feature Extraction
Original dimensions: (5216, 22500)
PCA dimensions: (5216, 1405)
Explained variance ratio: 0.9500

Step 4: Traditional ML Models with Simple Train-Test Split
Model: Logistic Regression
Accuracy: 0.9521
Precision: 0.9527
Recall: 0.9521
F1 Score: 0.9523
ROC AUC: 0.9886
--------------------------------------------------
Model: SVM
Accuracy: 0.9761
Precision: 0.9760
Recall: 0.9761
F1 Score: 0.9760
ROC AUC: 0.9957
--------------------------------------------------
Model: Random Forest
Accuracy: 0.8372
Precision: 0.8462
Recall: 0.8372
F1 Score: 0.8142
ROC AUC: 0.9523
--------------------------------------------------
Model: Gradient Boosting
Accuracy: 0.9444
Precision: 0.9443
Recall: 0.9444
F1 Score: 0.9433
ROC AUC: 0.9836
--------------------------------------------------
Model: Neural Network
Accuracy: 0.9550
Precision: 0.9547
Recall: 0.9550
F1 Score: 0.9548
ROC AUC: 0.9904
--------------------------------------------------

Step 5: Cross-Validation Evaluation
Model: Logistic Regression
Mean Accuracy: 0.9515
Std Accuracy: 0.0044
--------------------------------------------------
Model: SVM
Mean Accuracy: 0.9707
Std Accuracy: 0.0040
--------------------------------------------------
Model: Random Forest
Mean Accuracy: 0.8315
Std Accuracy: 0.0112
--------------------------------------------------
Model: Gradient Boosting
Mean Accuracy: 0.9379
Std Accuracy: 0.0067
--------------------------------------------------
Model: Neural Network
Mean Accuracy: 0.9519
Std Accuracy: 0.0090
--------------------------------------------------

Step 6: Parameter Tuning
Best parameters: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
Best cross-validation score: 0.9730
Model saved to results/best_traditional_model.pkl

Step 7: Deep Learning Models
/.pyenv/versions/3.10.12/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
/.pyenv/versions/3.10.12/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()

372ms/step - accuracy: 0.7989 - loss: 0.3922 - val_accuracy: 0.8587 - val_loss: 0.3435 - learning_rate: 0.0010
30ms/step - accuracy: 0.8208 - loss: 0.3372WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
368ms/step - accuracy: 0.8459 - loss: 0.3241 - val_accuracy: 0.8060 - val_loss: 0.4041 - learning_rate: 0.0010
...

 - val_loss: 0.1766 - learning_rate: 0.0010
CNN Test Accuracy: 0.9425
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.

Step 8: SOM Visualization

Step 9: Results Comparison

Step 10: Save Results Summary

Results saved to 'results' directory

Analysis Complete
